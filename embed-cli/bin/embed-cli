#!/bin/bash
#
# Main entry point for embed-cli CLI tool

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly LIB_DIR="${SCRIPT_DIR}/../lib"

# Source required libraries
source "${LIB_DIR}/common.sh"
source "${LIB_DIR}/logging.sh"
source "${LIB_DIR}/validation.sh"

# Source command system
source "${LIB_DIR}/commands/command.sh"

# Define command handlers mapping
declare -A command_handler=(
    ["user"]="${LIB_DIR}/commands/user.sh"
    ["jobs"]="${LIB_DIR}/commands/jobs.sh"
    ["health"]="${LIB_DIR}/commands/health.sh"
    ["stages"]="${LIB_DIR}/commands/stages.sh"
    ["subscription"]="${LIB_DIR}/commands/subscription.sh"
    ["identity"]="${LIB_DIR}/commands/identity.sh"
)

# Execute the specified command
execute_command() {
    local command="$1"
    shift
    
    if [[ -n "${command_handler[$command]:-}" ]]; then
        source "${command_handler[$command]}"
        "${command}_cmd" "$@"
    else
        echo "Error: Unknown command '$command'" >&2
        show_help
        exit "$E_USAGE"
    fi
}

show_help() {
    cat << 'HELP'
Usage: embed-cli COMMAND [OPTIONS]

Commands:
    user          Manage user account information
    jobs          View and manage jobs
    health        Check system health
    stages        Manage product stages
    subscription  Manage subscriptions
    identity      Manage identity services

Options:
    -h, --help     Show this help message
    -v, --version  Show version information

For command-specific help, run:
    embed-cli COMMAND --help
HELP
}

main() {
    # Handle no arguments case
    if [[ $# -eq 0 ]]; then
        show_help
        exit "$E_USAGE"
    fi

    # Parse command line options
    case "$1" in
        "-v"|"--version")
            echo "embed-cli version $VERSION"
            exit 0
            ;;
        "help"|"-h"|"--help")
            show_help
            exit 0
            ;;
        *)
            # Validate environment before executing command
            validate_environment
            execute_command "$1" "${@:2}"
            ;;
    esac
}

# Set up interrupt handler
trap 'error_exit "Script interrupted." "$E_INTERRUPTED"' INT TERM

# Only execute main if script is being run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi